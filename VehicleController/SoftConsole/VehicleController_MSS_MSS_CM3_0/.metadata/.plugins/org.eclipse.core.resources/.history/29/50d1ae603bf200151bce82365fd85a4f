/**************************************\
 * File Name:      pwm.h
 * Project Name:   EECS373 Final Project
 * Created by:     Jawad Nasser
 * Modified by:    Adrian Padin
 * 			       Emily Rowland
 * 				   Ben Roland Miron
 * Start date:     23 March 2016
 * Last modified:  23 March 2016
 \**************************************/

#ifndef PS2_H
#define PS2_H


#include <stdio.h>
#include <inttypes.h>
#include <stdlib.h>
#include <assert.h>

#define APB_BASE_ADDR 0x40050000;

#define H_BRIDGE_FORWARD  0x5
#define H_BRIDGE_BACKWARD 0xA
#define H_BRIDGE_OFF	  0x0


// Set the duty cycle to a value between 0 and 100
void setPWMDuty(int duty) {

	// Duty should be between 0 and 100
	assert(duty >= 0 && duty <= 100);

	// Write to offset 0
	volatile uint32_t * addr_ptr = (uint32_t *) APB_BASE_ADDR;
	*addr_ptr = duty;
}

// Get the duty cycle
uint32_t getPWMDuty(void) {

	// Read from offset 0
	volatile uint32_t * addr_ptr = (uint32_t *) APB_BASE_ADDR;
	return *addr_ptr;
}

// Set the H-Bridge bits
void setHBridgeInputs(uint32_t H_in) {

	// These are invalid values and will harm the H-bridge
	assert(!(H_in == 0x3));
	assert(!(H_in == 0xC));

	// First read value to do error checking, offset 4
	volatile uint32_t * addr_ptr = (uint32_t *) APB_BASE_ADDR;
	addr_ptr += 1;

	// Write to offset 4
	// Write 0 first for safety with h-bridge
	*addr_ptr = 0;
	*addr_ptr = H_in;
}


// Get the duty cycle
uint32_t getHBridgeInputs(void) {

	// Read from offset 4
	volatile uint32_t * addr_ptr = (uint32_t *) APB_BASE_ADDR;
	++addr_ptr;
	return *addr_ptr;
}
